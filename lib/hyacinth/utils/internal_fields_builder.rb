class Hyacinth::Utils::InternalFieldsBuilder

  attr_accessor :internal_fields

  ### METHOD intialize -- BEGIN ####
  def initialize

    @internal_fields = {}

  end
  ### METHOD intialize -- END ####

  ### METHOD clear_all_data -- BEGIN ####
  def clear_all_data

    @internal_fields.each do |key, value|

      @internal_fields[key] = ''

    end

  end

  def add_internal_field(internal_field_name)

    internal_fields[internal_field_name] = ''

    self.class.send :define_method, "set_#{internal_field_name}" do |arg|

      internal_fields[internal_field_name] = arg

    end

    return method("set_#{internal_field_name}")

  end

  ### METHOD process_header -- BEGIN ####
  def process_header(header)

    # convention is that the internal field should start with an underscore
    if !( header.match(/^_/) )
      puts "ERROR, did not start with an underscore"
      return nil
    end

    return add_internal_field header


  end
  ### METHOD process_header -- END ####

  def output_data_in_hif

    output_in_hif = '{'

    output_array = []

    @internal_fields.each do |key, value|

      # output_array << '"name_type"=>"' + @type + '"' unless @type.blank?
      output_array << "\"#{key}\"=>[\"#{value}\"]" unless value.blank?

    end

    output_in_hif += output_array.to_sentence(two_words_connector: ', ', last_word_connector: ', ')
    output_in_hif += '}'

    # puts '*************** Here is the name output in hif ********************'
    # puts output_in_hif

    output_in_hif

  end

  # hif: hyacinth internal format
  ### METHOD output_data_in_hif -- BEGIN ####
  def output_data_in_hif_old

    output = []
    output << '"_pid"=>["' + @pid + '"]' unless @pid.blank?    
    # parent_pid is an array, so the array brackets will be generated by #to_s
    output << '"_parent_pid"=>' + @parent_pid.to_s + '' unless @parent_pid.blank?
    output << '"_type"=>["' + @type + '"]' unless @type.blank?
    output << '"_identifier_for_import"=>["' + @identifier_for_import + '"]' unless @identifier_for_import.blank?
    # parent_identifier_for_import is an array, so the array brackets will be generated by #to_s
    output << '"_parent_identifier_for_import"=>' + @parent_identifier_for_import.to_s + '' unless @parent_identifier_for_import.blank?
    output << '"_file_path"=>["' + @file_path + '"]' unless @file_path.blank?
    output << '"_project"=>["' + @project + '"]' unless @project.blank?
    # publish_target is an array, so the array brackets will be generated by #to_s
    output << '"_publish_target"=>' + @publish_target.to_s + '' unless @publish_target.blank?

    output.to_sentence(two_words_connector: ', ', last_word_connector: ', ')

  end
  ### METHOD output_data_in_hif -- END ####

end
